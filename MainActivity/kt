package com.example.easykeep


import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.util.TypedValue
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.easykeep.*
import com.firebase.ui.database.FirebaseRecyclerAdapter
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.*

class MainActivity : AppCompatActivity() {
    private var fAuth: FirebaseAuth? = null
    private var mNotesList: RecyclerView? = null
    private var gridLayoutManager: GridLayoutManager? = null
    private var fNotesDatabase: DatabaseReference? = null
    public override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        mNotesList = findViewById<View>(R.id.notes_list) as RecyclerView
        gridLayoutManager = GridLayoutManager(this, 2, GridLayoutManager.VERTICAL, false)
        mNotesList!!.setHasFixedSize(true)
        mNotesList!!.layoutManager = gridLayoutManager
        //gridLayoutManager.setReverseLayout(true);
        //gridLayoutManager.setStackFromEnd(true);
        mNotesList!!.addItemDecoration(GridSpacingItemDecoration(2, dpToPx(10), true))
        fAuth = FirebaseAuth.getInstance()
        if (fAuth!!.currentUser != null) {
            fNotesDatabase = FirebaseDatabase.getInstance().reference.child("Notes").child(fAuth!!.currentUser.uid)
        }
        updateUI()
        loadData()
    }

    public override fun onStart() {
        super.onStart()
    }

    private fun loadData(): Int  {
        val query = fNotesDatabase!!.orderByValue()
        val firebaseRecyclerAdapter: FirebaseRecyclerAdapter<NoteModel, NoteViewHolder> =
                object : FirebaseRecyclerAdapter<NoteModel, NoteViewHolder>(
                        NoteModel::class,java,
                                R.layout.single_note_layout,
                        NoteModel::class.Java,
                        query)
         {
            protected fun populateViewHolder(viewHolder: NoteViewHolder, model: NoteModel?, position: Int) {
                val noteId: String? = getRef(position).getKey()
                if (noteId != null) {
                    fNotesDatabase!!.child(noteId).addValueEventListener(object : ValueEventListener {
                        override fun onDataChange(dataSnapshot: DataSnapshot) {
                            if (dataSnapshot.hasChild("title") && dataSnapshot.hasChild("timestamp")) {
                                val title = dataSnapshot.child("title").value.toString()
                                val timestamp = dataSnapshot.child("timestamp").value.toString()
                                viewHolder.setNoteTitle(title)
                                viewHolder.setNoteTime(timestamp);
                                val getTimeAgo = GetTimeAgo
                                viewHolder.setNoteTime(getTimeAgo.getTimeAgo(timestamp.toLong(), applicationContext).toString())
                                viewHolder.noteCard.setOnClickListener {
                                    val intent = Intent(this@MainActivity, NewNoteActivity::class.java)
                                    intent.putExtra("noteId", noteId)
                                    startActivity(intent)
                                }
                            }
                        }

                        override fun onCancelled(databaseError: DatabaseError) {}
                    })
                }
            }

            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NoteViewHolder {
                TODO("Not yet implemented")
            }

            override fun onBindViewHolder(p0: NoteViewHolder, p1: Int, p2: NoteModel) {
                TODO("Not yet implemented")
            }
        }
        mNotesList!!.adapter = firebaseRecyclerAdapter
    }


    private fun updateUI() {
        if (fAuth!!.currentUser != null) {
            Log.i("MainActivity", "fAuth != null")
        } else {
            val startIntent = Intent(this@MainActivity, StartActivity::class.java)
            startActivity(startIntent)
            finish()
            Log.i("MainActivity", "fAuth == null")
        }
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        super.onCreateOptionsMenu(menu)
        menuInflater.inflate(R.menu.main_menu, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        super.onOptionsItemSelected(item)
        when (item.itemId) {
            R.id.new_note_btn -> {
                val newIntent = Intent(this@MainActivity, NewNoteActivity::class.java)
                startActivity(newIntent)
            }
        }
        return true
    }


    private fun dpToPx(dp: Int): Int {
        val r = resources
        return Math.round(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp.toFloat(), r.displayMetrics))
    }
}
